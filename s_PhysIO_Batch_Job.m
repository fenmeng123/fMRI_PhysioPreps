function matlabbatch = s_PhysIO_Batch_Job(OutputDir,CardiacECGDir,ScansDICOMDir,varargin)
%-----------------------------------------------------------------------
%                      fMRI_PhysioPreps Project
% PhysIO Toolbox SPM MATLAB Batch Job File (Template)
% spm SPM - SPM12 (7771)
% Auto-generated by SPM Batch GUI
% Date: 2023-11-16
% Author: Kunru Song
%-----------------------------------------------------------------------
% Input:
%   Positional Arguments (Required):
%       OutputDir - The absolute directory of output folder for a single
%                   subject, which will contains two files:
%                   multiple_regressors.txt and physio.mat
%                   (Multiple Regressors generated by PhysIO Toolbox)
%                   (Mat-file contains Cardiac time series data [ECG
%                   signal]).
%                   If set as empty ('[]'), fMRI_PhysioPreps will
%                   automatically extract subject ID from ECG file name and
%                   create a new folder named by subject ID in the current
%                   working directory.
%       CardiacECGDir - The absolute directory of input ECG file, must be
%                       in format of SIEMENS PMU log file with extension '.ecg'.
%                       Its file name will be used as subject ID.
%       ScansDICOMDir - The absolute directory of the first fMRI scan
%                       (i.e. volume) from the scanning session to be
%                       aligned with ECG time series, must be a DIOCM file.
%                       PhysIO will read in the 'Acqusition Time' from
%                       DICOM header and perform time algining.
%   Key-value Paris Arguments (Required):
%       'Nscans' - the number of total fMRI scans in this session. No
%                   default value, must be mannully sepecified.
%   Key-value Paris Arguments (Optional):
%       'Nslices' - the number of slices in a single scan. Default is 30.
%       'OnsetSlice' - the index of scanning onset slice, should fall in
%                       range of Nslices. Default is 1.
%       'TR' - the Repetition Time of fMRI scanning, in seconds.
%               Default is 2.
%       'SamplingInterval' - the sampling rate of interval for raw ECG
%                               signal, may varied by type of SIEMENS PMU
%                               vendor, in seconds. Default is 0.0025 (2.5ms)
%       'FilteringType' - filter type for Physio Toolbox built-in
%                           physiological data preprocessing, a string.
%                           Acceptable values are 'NONE','BUTTER' or
%                           'CHEB'. Default is 'NONE', do not use the
%                           built-in filter in PhysIO toolbox.
% 
[~,SubjectID,~] = fileparts(CardiacECGDir);
if isempty(OutputDir)
    OutputDir = fullfile(pwd,SubjectID);
end

p = s_PhysIO_ParseInput(OutputDir,CardiacECGDir,ScansDICOMDir,varargin{:});

PhysIO_SaveDir = s_ConevrtDirVariable2Cellstr(p.Results.OutputDir);
matlabbatch{1}.spm.tools.physio.save_dir = PhysIO_SaveDir;
matlabbatch{1}.spm.tools.physio.model.output_multiple_regressors = 'multiple_regressors.txt';
matlabbatch{1}.spm.tools.physio.model.output_physio = 'physio.mat';
PhysIO_LogFile = s_ConevrtDirVariable2Cellstr(p.Results.CardiacECGDir);
matlabbatch{1}.spm.tools.physio.log_files.cardiac = PhysIO_LogFile;
PhysIO_ScanFile = s_ConevrtDirVariable2Cellstr(p.Results.ScansDICOMDir);
matlabbatch{1}.spm.tools.physio.log_files.scan_timing = PhysIO_ScanFile;
matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nslices = p.Results.Nslices;
matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.TR = p.Results.TR;
matlabbatch{1}.spm.tools.physio.log_files.sampling_interval = p.Results.SamplingInterval;
fprintf('--------------------fMRI_PhysioPrep--------------------\n')
fprintf('| Prepare SPM Batch Job for Subject ID: %s\n',SubjectID)
fprintf('| Input ECG file: %s\n',PhysIO_LogFile{:})
fprintf('| Input Scan timming file: %s\n',PhysIO_ScanFile{:})
fprintf('| Output Directory: %s\n',PhysIO_SaveDir{:})
if isempty(p.Results.Nscans)
    error('The number of fMRI scans can not be empty!')
else
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nscans = p.Results.Nscans;
end
fprintf('| Nscans: %d\t',matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nscans)

if isempty(p.Results.OnsetSlice)
    warning('Onset slice has not been provided! Default use 1')
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.onset_slice = 1;
else
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.onset_slice = p.Results.OnsetSlice;
end
fprintf('Nslice: %d\tOnset Slice No.: %d\t', ...
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nslices, ...
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.onset_slice)
fprintf('TR: %d\t Sampling Rate: (%dHz)(%.4fms)|\n', ...
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.TR, ...
    1/(matlabbatch{1}.spm.tools.physio.log_files.sampling_interval), ...
    matlabbatch{1}.spm.tools.physio.log_files.sampling_interval*1000)
switch upper(p.Results.FilteringType)
    case 'NONE'
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.no = struct([]);
    case 'BUTTER'
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.type = 'butter';
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.passband = [0.3 9];
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.stopband = [48 52];
    case 'CHEB'
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.type = 'cheb2';
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.passband = [0.3 9];
        matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.yes.stopband = [48 52];
end
switch upper(p.Results.IncludeHRV)
    case 'YES'
        matlabbatch{1}.spm.tools.physio.model.hrv.yes.delays = 0;
    case 'NO'
        matlabbatch{1}.spm.tools.physio.model.hrv.no = struct([]);
end
fprintf('|Filter: %s\tInclude HRV: %s|\n', ...
    p.Results.FilteringType,...
    p.Results.IncludeHRV)
fprintf('--Single Subject, Single Session Prepreocess Settings--\n')

%% Default Settings - No Changes
matlabbatch{1}.spm.tools.physio.log_files.vendor = 'Siemens';
matlabbatch{1}.spm.tools.physio.log_files.respiration = {''};
matlabbatch{1}.spm.tools.physio.log_files.relative_start_acquisition = 0;
matlabbatch{1}.spm.tools.physio.log_files.align_scan = 'first';

matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.NslicesPerBeat = [];
matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Ndummies = 0;
matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.time_slice_to_slice = [];
matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nprep = [];
matlabbatch{1}.spm.tools.physio.scan_timing.sync.nominal = struct([]);

matlabbatch{1}.spm.tools.physio.preproc.cardiac.modality = 'ECG';
matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.min = 0.4;
matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.file = 'initial_cpulse_kRpeakfile.mat';
matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.max_heart_rate_bpm = 120;
matlabbatch{1}.spm.tools.physio.preproc.cardiac.posthoc_cpulse_select.off = struct([]);
matlabbatch{1}.spm.tools.physio.preproc.respiratory.filter.passband = [0.01 2];
matlabbatch{1}.spm.tools.physio.preproc.respiratory.despike = false;

matlabbatch{1}.spm.tools.physio.model.orthogonalise = 'none';
matlabbatch{1}.spm.tools.physio.model.censor_unreliable_recording_intervals = false;
matlabbatch{1}.spm.tools.physio.model.retroicor.yes.order.c = 3;
matlabbatch{1}.spm.tools.physio.model.retroicor.yes.order.r = 4;
matlabbatch{1}.spm.tools.physio.model.retroicor.yes.order.cr = 1;
matlabbatch{1}.spm.tools.physio.model.rvt.no = struct([]);
matlabbatch{1}.spm.tools.physio.model.noise_rois.no = struct([]);
matlabbatch{1}.spm.tools.physio.model.movement.no = struct([]);
matlabbatch{1}.spm.tools.physio.model.other.no = struct([]);

matlabbatch{1}.spm.tools.physio.verbose.close_figs = true;
matlabbatch{1}.spm.tools.physio.verbose.level = 0;
matlabbatch{1}.spm.tools.physio.verbose.fig_output_file = '';
matlabbatch{1}.spm.tools.physio.verbose.use_tabs = true;



end

function p = s_PhysIO_ParseInput(OutputDir,CardiacECGDir,ScansDICOMDir,varargin)
% Parse the input arguments for s_Physio_Batch_Job
p = inputParser;
addRequired(p,'OutputDir',@(x)ischar(x)||isstring(x));
if ~exist(OutputDir,"dir")
    mkdir(OutputDir)
end
ValidateInputFile = @(x) (ischar(x)||isstring(x)) && (exist(x,'file') ~= 0);
addRequired(p,'CardiacECGDir',ValidateInputFile);
addRequired(p,'ScansDICOMDir',ValidateInputFile);
addParameter(p,'Nslices',30,@(x)isscalar(x));
addParameter(p,'TR',2,@(x)isscalar(x));
addParameter(p,'Nscans',[],@(x)isscalar(x));
addParameter(p,'OnsetSlice',[],@(x)isscalar(x));
addParameter(p,'SamplingInterval',0.0025,@(x)isscalar(x));
addParameter(p,'FilteringType','NONE', ...
    @(x) any(validatestring(x,{'NONE','BUTTER','CHEB'})));
addParameter(p,'IncludeHRV','YES',@(x)ischar(x));
parse(p,OutputDir,CardiacECGDir,ScansDICOMDir,varargin{:});
end

function DirCellstr = s_ConevrtDirVariable2Cellstr(DirVariable)
% Convert character and string into a cell string.
if ischar(DirVariable)
    DirCellstr = {DirVariable};
elseif isstring(DirVariable)
    DirCellstr = cellstr(DirVariable);
end


end