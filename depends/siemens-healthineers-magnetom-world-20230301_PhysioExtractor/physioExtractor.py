#!/usr/bin/python

# -----------------------------------------------------------------------------
#	  Copyright (C) Siemens Healthcare GmbH 2022  All Rights Reserved.
# -----------------------------------------------------------------------------
# 
#      Project: Advanced physio logging
#      Lang: Python
#
# -----------------------------------------------------------------------------

# please note: This demonstration script comes without any warranty and only serves the purpose
#              of illustrating the concept for extracting physio data embedded in a dedicated DICOM File

import sys, os, argparse
# zlib docu:  http://wiki.glitchdata.com/index.php?title=Python:_File_Compression_and_Decompression#UC.231_-_Using_gzip_in_Python
#import zlib
from zlib import decompressobj, MAX_WBITS

# dicom doku: http://code.google.com/p/pydicom/wiki/PydicomUserGuide
#import dicom
from pydicom import read_file

# XML:        https://pypi.python.org/pypi/lxml/2.3
# XSLT docu:  http://edutechwiki.unige.ch/en/XSLT_Tutorial_-_Basics
from lxml import etree

_PHYSIO_EXTRACTOR_VERSION_ = '1.0'
_args      = ''
_pmuxml    = ''

def decompress_pmu(pmucomp):
    global _args, _pmuxml
    
    # decompress _pmucomp
    CHUNKSIZE=min( 1024, len(pmucomp) )
    #d = zlib.decompressobj(16+zlib.MAX_WBITS)
    d = decompressobj(16+MAX_WBITS)
    
    physiodecompchunks = []
    for startidx in range(0, len(pmucomp) , CHUNKSIZE):
        buffer = pmucomp[startidx:startidx+CHUNKSIZE]
        chunk = d.decompress(buffer)
        physiodecompchunks.append(chunk.decode('ascii'))
    
    _pmuxml = ''.join(physiodecompchunks)
    
    if _args.xml:
        xmlfilename = os.path.splitext(os.path.split(_args.infile)[1])[0] + '.xml'
        if _args.outdir:
            xmlfilename = os.path.join(_args.outdir, xmlfilename)
        else:
            xmlfilename = os.path.split(_args.infile)[0] + xmlfilename
        if _args.verbose > 0:
            print ('* Writing XML output to file: ' + xmlfilename)
        if not _args.force and os.path.exists(xmlfilename):
            print ('!!!\n!!!\tXML file allready exists and not forced to overwrite! Skip saving...\n!!!')
        else:
            fo = open(xmlfilename, 'w')
            fo.write(_pmuxml)
            fo.close()

def apply_xsl():
    global _args, _pmuxml
    
    for style in _args.styles:
        print ("***\n*** Applying style file:" + style + "\n***")
        if not os.path.isfile(style):
            print ('!!! Style file does not exist! ' + style)
            continue
        xsl=open(style, 'r').read()
        xslt_root=etree.XML(xsl)
        transform=etree.XSLT(xslt_root)

        result=transform(etree.XML(str.encode(_pmuxml)))
        if _args.verbose > 1:
            print ("***\tResult of style file:" + style + '\n' + str(result))
        
        # Generate output file name
        stylefilename = os.path.splitext(os.path.split(style)[1])[0]
        outfilename = os.path.normpath(os.path.join(_args.outdir, stylefilename + '_' + os.path.splitext(os.path.split(_args.infile)[1])[0] + '.txt'))
        print ('***\tWriting output to: ' + outfilename)
        if not _args.force and os.path.exists(outfilename):
            print ('!!!\n!!!\tResult file allready exists and not forced to overwrite! Skip saving...\n!!!')
        else:
            fo=open(outfilename, 'w')
            fo.write(str(result))
            fo.close()

def main(argv):
    global _args, _PHYSIO_EXTRACTOR_VERSION_
    
    parser = argparse.ArgumentParser(description='Tool to parse non-image DICOM series generated by physio WIP 840 Version ' + _PHYSIO_EXTRACTOR_VERSION_)
    parser.add_argument('-x','--xml',    help='Optionally save full xml file. This file will be created in <OUTDIR> and conatains entire physiological information.',default=False,action='store_true')
    parser.add_argument('-v','--verbose',help='Set verbose level of output.', default=0, type=int)
    parser.add_argument('-o','--outdir', help='Path to output directory. Files will be created/overwritten and contain physio information depending on supplied XSL-files.')
    parser.add_argument('-f','--force',  help='Force overwrite of existing result files. Default if false',default=False,action='store_true')
    parser.add_argument('infile',        help='Path to input non-image DICOM series which contains physio information.')
    parser.add_argument('styles',        help='List of paths to existing XSLT files. These files will be used to generate text files which contain the corresponding physio information of interest.', nargs='+')
    _args = parser.parse_args()
    if not _args.outdir:
        _args.outdir = os.path.normpath(os.path.split(_args.infile)[0])
    
    if _args.verbose > 0:
        print ('*\n* Given arguments: ')
        for key in _args.__dict__:
           print ('*    ' + str(key) + '\t' + str(_args.__dict__[key]))
        print ('*')
    
    if not os.path.isfile(_args.infile):
        print ('!!! Physio non-image DICOM file does not exist! ' + _args.infile)
        exit(0)

    if not os.path.isdir(_args.outdir):
        print ('!!! Output directory not found ==> Create directory: ' + _args.outdir)
        os.mkdir(_args.outdir)

    #pmudicom = dicom.read_file(_args.infile)
    pmudicom = read_file(_args.infile)
    if (0x7FE00010 in pmudicom):
        decompress_pmu(pmudicom[0x7FE0,0x0010].value) # check for image data
        apply_xsl()
        return
    if (0x7FE11010 in pmudicom):
        decompress_pmu(pmudicom[0x7FE1,0x1010].value) # check for spectroscopy data
        apply_xsl()
        return

    print ('Non image dicom content not present in this data!\nUnable to find tag (0x7FE0,0x0010) or (0x7FE1,0x1010)')
    print ('Found keys: ', pmudicom.keys())
    return


if __name__ == '__main__':
    main(sys.argv)
	
