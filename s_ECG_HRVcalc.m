function [HRV,RR_intervals] = s_ECG_HRVcalc(R_locs, Fs)
% Calculate Heart Rate Variability-related Features from ECG Signals
% HRV calculating used the following methods:
% 1. SDNN: Standard Deviation of NN intervals
%   a measure of the variability in heart rate and is one of the most
%   common time-domain methods used to assess heart rate variability (HRV),
%   where NN intervals are the normal-to-normal heartbeats
% 2. RMSSD: Root Mean Square of the Successive Differences:
%   the square root of the mean of the squares of the successive
%   differences between adjacent NN intervals. 
% 3. Frequency-domain measures
%   Low-Frequency (LF) power, High-Frequency (HF) power, and LF/HF ratio, 
%   which reflect the balance between the sympathetic and parasympathetic
%   nervous systems.
% 
% Input:
%   R_Locs (Required) - a vector of onset-times of occuring heart beats.
%           If it is generated by tapas_physio_get_cardiac_pulses, do not
%           provide input argument 'Fs'. Instead, set Fs as empty ('[]').
%   Fs (Optional) - a scalar indicates the frequency of sampling, in Hz.
%                   Default is 400 Hz.
%                   If you provide Fs as the second input positional
%                   argument, this function assumes that the input
%                   ECG_signal has not been converted into unit of seconds.
% Output:
%   HRV - a struct contains HRV value across the full length of input time
%           series, time-domain and frequency-domain features.
%   HRV.time.MeanRR - the average value of R-R intervals
%   HRV.time.SDNN - HRV value (standard deviations of R-R interval)
%   HRV.time.RMSSD - HRV value (RMSSD)
%   HRV.freq.LowFreqPower - HRV value (band power of 0.04~0.15 Hz)
%   HRV.freq.HighFreqPower - HRV value (band power of 0.15~0.4 Hz)
%   HRV.freq.LFHF - HRV value (the ratio of low-frequency power to
%                   high-frequency power)
% 
% Written By Kunru Song 2023.11.20

if nargin == 1
    Fs = 400;% Default sampling rate of Siemens ECG equipment
end

% Get the R-R interval
if isempty(Fs)
    RR_intervals = diff(R_locs);
else
    RR_intervals = diff(R_locs) / Fs; % convert unit into seconds
end
% Calculate time-domain features
HRV.time.MeanRR = mean(RR_intervals);
HRV.time.SDNN = std(RR_intervals);
HRV.time.RMSSD = sqrt(mean(diff(RR_intervals).^2));

% Calculate frequency-domain features
[pxx, f] = pwelch(RR_intervals-mean(RR_intervals), [], [], [], Fs);
HRV.freq.LowFreqPower = bandpower(pxx, f, [0.04 0.15], 'psd');
HRV.freq.HighFreqPower = bandpower(pxx, f, [0.15 0.4], 'psd');
HRV.freq.LFHF = HRV.freq.LowFreqPower / HRV.freq.HighFreqPower;


end
