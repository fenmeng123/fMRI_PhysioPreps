function Results = s_ECG_Postprocess(PhysioMatDir,Fs)
% Post-processing for the aligned ECG signal time series.
% Automatically perform Butterworth filtering and HRV-related metrics
% calucation.
% Default filter design is a high-pass filter with low frequency boundary
% 0.2 Hz and subsequently combined with a band-pass filter from 0.3Hz ~
% 9Hz, which is consistent with the default setttings in PhysIO Toolbox.
% After running this function, a new post_physio.mat file will be created
% at the folder that contains the raw physio.mat file.
% 
% Input:
%   Positional Arguments:
%       PhysioMatDir (Required) - The absolute directory of the physio.mat
%                                   file generated by PhysIO toolbox.
%       Fs (Optional) - a scalar indicates the frequency of sampling.
%                       Default is 400 Hz.
% 
% 
% Output:
%   Results - a MATLAB struct contains all post-processed metrics, which
%   has the following fields:
%   Results.ECGsignal.filtered_c - the filtered cardiac response time
%                                   series, in unit of sampling interval.
%   Results.ECGsignal.filtered_cpulse - the detected R-wave peaks vector
%                                       based on the filtered cardiac
%                                       response time series, using the 
%                                       'auto_match' QRS detection method
%                                       in PhysIO Toolbox.
%   Results.ECGsignal.RR_intervals - the R-R intervals extracted from the
%                                       R-wave peaks time series.
%   Results.HRV.time.MeanRR - the average value of R-R intervals
%   Results.HRV.time.SDNN - HRV value (standard deviations of R-R interval)
%   Results.HRV.time.RMSSD - HRV value (RMSSD)
%   Results.HRV.freq.LowFreqPower - HRV value (band power of 0.04~0.15 Hz)
%   Results.HRV.freq.HighFreqPower - HRV value (band power of 0.15~0.4 Hz)
%   Results.HRV.freq.LFHF - HRV value (the ratio of low-frequency power to
%                   high-frequency power)
% 
% 
% Written By Kunru Song 2023.11.20

if nargin == 1
    Fs = 400;% Sampling frequency
end

Results = struct('ECGsignal',[],'HRV',[]);

fprintf('--------------------fMRI_PhysioPrep--------------------\n')

% Load raw physio.mat file
[OutputFolder,~,~] = fileparts(PhysioMatDir);
[~, SubjectID] = fileparts(OutputFolder);
physio = load(PhysioMatDir);
physio = physio.physio;
fprintf('| Load Raw physio.mat for Subject ID: %s\n',SubjectID)
fprintf('| Input mat file: %s\n',PhysioMatDir)

% Get ECG signal variable
ecg_signal = physio.ons_secs.c;% (Your ECG signal data here)

% Call the custom filter function
Results.ECGsignal.filtered_c = s_ECG_Butterworth(ecg_signal, Fs);
fprintf('| Applying Butterworth filter: √\t')
% Generate Time vector
t = (0:length(ecg_signal)-1) / Fs;

% Default Settings for QRS detection
cpulse_detect_options.method = 'auto_matched';
cpulse_detect_options.min = 0.4;
cpulse_detect_options.file = 'initial_cpulse_kRpeakfile.mat';
cpulse_detect_options.max_heart_rate_bpm = 120;
cpulse_detect_options.kRpeak = [];
physio_verbose.close_figs = false;
physio_verbose.level = 0;
physio_verbose.fig_output_file = '';
physio_verbose.use_tabs = true;
physio_verbose.fig_handles = [];

% Get the vector of onset-times (in seconds) of occuring heart beats
[Results.ECGsignal.filtered_cpulse, ~] = tapas_physio_get_cardiac_pulses( ...
    t, ...
    Results.ECGsignal.filtered_c, ...
    cpulse_detect_options, 'ECG', physio_verbose);
fprintf('QRS Detection: √\t')

[Results.HRV,Results.ECGsignal.RR_intervals] = s_ECG_HRVcalc(Results.ECGsignal.filtered_cpulse,[]);
fprintf('HRV Calculation: √|\n')

PostPhysioMatDir = fullfile(OutputFolder,'post_physio.mat');
ECGsignal = Results.ECGsignal;
HRV = Results.HRV;
save(PostPhysioMatDir,'ECGsignal','HRV');
fprintf('| Save post-process results into: %s\n',PostPhysioMatDir)
fprintf('-------------Single Subject Post-processing------------\n')


